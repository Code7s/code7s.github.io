<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>call、bind、apply的区别</title>
    <url>/call%E3%80%81bind%E3%80%81apply%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<blockquote>
<p>call()、bind()、apply()都是用来修改函数this指向的</p>
</blockquote>
<p>先看下面例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  name:<span class="string">'leo'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span>+<span class="keyword">this</span>.name+<span class="string">'年龄：'</span>+<span class="keyword">this</span>.age+<span class="string">'从'</span>+a+<span class="string">'到'</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call</span></span><br><span class="line">fn.call(person,<span class="string">'南昌'</span>,<span class="string">'武汉'</span>)</span><br><span class="line"><span class="comment">// 姓名：leo年龄：23从南昌到武汉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind</span></span><br><span class="line">fn.bind(person,<span class="string">'北京'</span>,<span class="string">'上海'</span>)()</span><br><span class="line"><span class="comment">//姓名：leo年龄：23从北京到上海</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apply</span></span><br><span class="line">fn.apply(person,[<span class="string">'杭州'</span>, <span class="string">'深圳'</span>])</span><br><span class="line"><span class="comment">//姓名：leo年龄：23从杭州到深圳</span></span><br><span class="line">fn.apply(person,<span class="string">'杭州'</span>,<span class="string">'深圳'</span>)</span><br><span class="line"><span class="comment">//Uncaught TypeError: CreateListFromArrayLike called on non-object</span></span><br></pre></td></tr></table></figure>

<p>从上面我们可以看出：</p>
<p>call:    函数执行时的this指向call的第一个参数，其它参数作为传参，call()会立即执行函数</p>
<p>bind:    返回一个新的函数，可以改this指向但不会立即执行</p>
<p><strong>注意：bind生成新函数之后不能再次bind修改指向,bind如果传入的不是一个对象则会调用相对的构造函数进行隐式类型转换</strong></p>
<p>apply: 所有参数都必须放在一个数组里面传进去,它只接受第二个参数为数组</p>
<p>总结：call和bind用法相同，区别就是前者会立即执行函数，而后者会生成个新函数，需要自己手动调用； apply和前两者的传参方式不同，前两者传递的是参数列表，而它只能传递一个参数数组</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配</title>
    <url>/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h2 id="了解html5的viewport"><a href="#了解html5的viewport" class="headerlink" title="了解html5的viewport"></a>了解html5的viewport</h2><blockquote>
<p>在做移动端开发时，为了使移动端的页面在不同的手机上同样的大小来显示，我们可以将页面的宽度固定，然后获取设备的宽度，可以得到我们之前设定的宽度与设备宽度的比例，再使用HTML5新增的viewport来对页面进行缩放，并固定不允许用户再重新缩放。</p>
</blockquote>
<p>使用meta标签时，可以添加viewport(可视区窗口)属性:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0,minimum-scale=1.0,user-scalable=0"</span> /&gt;</span>1</span><br></pre></td></tr></table></figure>

<p>content中可填以下属性：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>设置可视区的宽度，为一个正整数，使用字符串”width-device”表示设备宽度</td>
</tr>
<tr>
<td>initial-scale</td>
<td>设置页面的初始缩放值</td>
</tr>
<tr>
<td>minimum-scale</td>
<td>允许用户的最小缩放值</td>
</tr>
<tr>
<td>maximum-scale</td>
<td>允许用户的最大缩放值</td>
</tr>
<tr>
<td>height</td>
<td>设置可视区的高度，这个属性对我们并不重要，很少使用</td>
</tr>
<tr>
<td>user-scalable</td>
<td>是否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许</td>
</tr>
<tr>
<td>target-densitydpi</td>
<td>值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个</td>
</tr>
</tbody></table>
<p><strong>最后一个属性为安卓特有，并且安卓已经决定要废弃target-densitydpi 这个属性了，所以这个属性我们要避免进行使用 。</strong></p>
<p>meta标签扩展:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- width=device-width //可视区宽等于设备宽 user-scalable=no禁止用户缩放，ios10无效  min/max 最小缩放比例和最大缩放比例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no,width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 强制x5内核竖屏显示(QQ/微信/QQ浏览器内置的内核就是x5内核) content="landscape"强制横屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- x5内核浏览器全屏显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- UC浏览器竖屏显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- UC浏览器全屏显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁止识别电话号码和邮箱 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no,email=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="百分比适配"><a href="#百分比适配" class="headerlink" title="百分比适配"></a>百分比适配</h2><blockquote>
<p>百分比适配是通过给元素设置百分比的宽度进行适配，由于高度是固定的在不同分辨率的设备上显示也会有所差异</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>&#123;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">25%</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">float</span>: left;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.div1</span>&#123;<span class="attribute">background</span>: red;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.div2</span>&#123;<span class="attribute">background</span>: green;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.div3</span>&#123;<span class="attribute">background</span>: goldenrod;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.div4</span>&#123;<span class="attribute">background</span>: blue;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="viewport适配-推荐"><a href="#viewport适配-推荐" class="headerlink" title="viewport适配(推荐)"></a>viewport适配(推荐)</h2><blockquote>
<p>通过js创建meta标签并动态计算缩放比例，使得每个设备的显示宽度统一</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// alert(window.devicePixelRatio);//弹出设备的像素比</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// window.screen.availWidth 返回当前屏幕宽度(空白空间)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// window.screen.availHeight 返回当前屏幕高度(空白空间)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// window.screen.width 返回当前屏幕宽度(分辨率值)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// window.screen.height 返回当前屏幕高度(分辨率值)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// window.document.body.offsetHeight; 返回当前网页高度</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// window.document.body.offsetWidth; 返回当前网页宽度</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> w=<span class="built_in">window</span>.screen.width;<span class="comment">//获取device-width</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> targetW=<span class="number">320</span>;  <span class="comment">//把所有设备的宽度设置为320</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> scale=w/targetW;  <span class="comment">//计算缩放比例</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(scale);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> meta=<span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</span></span><br><span class="line"><span class="actionscript">  meta.name=<span class="string">'viewport'</span>;</span></span><br><span class="line"><span class="actionscript">  meta.content=<span class="string">'user-scalable=no, initial-scale='</span>+scale+<span class="string">',minimum-scale='</span>+scale+<span class="string">',maximum-scale='</span>+scale;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.head.appendChild(meta);</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="rem适配-推荐"><a href="#rem适配-推荐" class="headerlink" title="rem适配(推荐)"></a>rem适配(推荐)</h2><blockquote>
<p>通过给根节点设置fontsize，来确定rem的值</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//rem适配</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> html=<span class="built_in">document</span>.documentElement;<span class="comment">//获取html</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> hw=html.getBoundingClientRect().width;<span class="comment">//获取html的宽</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(hw);</span></span><br><span class="line"><span class="actionscript">  html.style.fontSize=hw/<span class="number">20</span>+<span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 给html设置fantasize为html宽度/20，说明1rem=1/20页面的宽度，可以根据设计稿确定，好算就行</span></span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router总结</title>
    <url>/vue-router%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="前端路由和后端路由的区别"><a href="#前端路由和后端路由的区别" class="headerlink" title="前端路由和后端路由的区别"></a>前端路由和后端路由的区别</h2><ul>
<li><p>后端路由是服务器根据用户不同的URL请求而返回不同的内容，是URL请求地址与服务器资源之间的对应关系</p>
</li>
<li><p>前端路由负责事件的监听，根据用户触发不同的事件显示不同的页面内容，是用户事件与事件处理函数之间的对应关系</p>
</li>
</ul>
<h2 id="Vue-router的使用"><a href="#Vue-router的使用" class="headerlink" title="Vue-router的使用"></a>Vue-router的使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--router-link代表路由链接to属性指向路由地址--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/a"</span>&gt;</span>转向a<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/b"</span>&gt;</span>转向b<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--router-view是路由地址所对应的组件显示的区域--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//创建组件A</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> A=&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>a组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="comment">//创建组件B</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> B=&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>b组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="comment">//创建路由对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">    routes:[</span><br><span class="line"><span class="actionscript">      <span class="comment">// 配置路由规则</span></span></span><br><span class="line"><span class="actionscript">      &#123;path:<span class="string">'/a'</span>,component:A&#125;,</span></span><br><span class="line"><span class="actionscript">      &#123;path:<span class="string">'/b'</span>,component:B&#125;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    router <span class="comment">//将路由对象挂载到vm实例上</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><blockquote>
<p>路由重定向指的是：当用户访问地址A的时候强制跳转到地址B，从而展示特定的组件页面</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    <span class="comment">// 这里的path指的是需要被重定向的原地址，redirect指的是重定向后的新地址</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'/a'</span>,<span class="attr">redirect</span>:<span class="string">'/b'</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><blockquote>
<p>在路由匹配规则中添加children属性添加子路由规则</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- router-link代表路由链接to属性指向路由地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/a"</span>&gt;</span>转向a<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/b"</span>&gt;</span>转向b<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- router-view是路由地址所对应的组件显示的区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建组件A</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> A = &#123;</span></span><br><span class="line">  template: `</span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    A组件</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/a/c"</span>&gt;</span>转向c<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/a/d"</span>&gt;</span>转向d<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">  `</span><br><span class="line">&#125;;</span><br><span class="line"><span class="actionscript"><span class="comment">//创建组件B</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> B = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>B组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="actionscript"><span class="comment">//创建组件C</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> C = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>C组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="actionscript"><span class="comment">//创建组件D</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> D = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>D组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="actionscript"><span class="comment">//创建路由对象</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">  routes: [</span><br><span class="line"><span class="actionscript">    <span class="comment">// 配置路由规则</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="actionscript">      path: <span class="string">"/a"</span>,</span></span><br><span class="line">      component: A,</span><br><span class="line">      children: [</span><br><span class="line"><span class="actionscript">        <span class="comment">//通过children添加子路由</span></span></span><br><span class="line"><span class="actionscript">        &#123; path: <span class="string">"/a/c"</span>, component: C &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; path: <span class="string">"/a/d"</span>, component: D &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    &#123; path: <span class="string">"/b"</span>, component: B &#125;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">  router <span class="comment">//将路由对象挂载到vm实例上</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    <span class="comment">// 通过在路由中添加:id实现动态的路由</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">'/a/:id'</span>,<span class="attr">component</span>:A&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 在上面例子中如果想在组件A中拿到动态的id值可以通过$route.params.id获取</span></span><br></pre></td></tr></table></figure>

<h2 id="路由传递参数（props）"><a href="#路由传递参数（props）" class="headerlink" title="路由传递参数（props）"></a>路由传递参数（props）</h2><blockquote>
<p>props可以设置为布尔值、对象和函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 1.布尔值：通过在路由中props:true,route.parmas将会被设置成组件属性，在组件中通过props接收该值</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">"/a/:id"</span>, <span class="attr">component</span>: A, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="comment">// 2.对象：在props中传递对象时组件B也可以通过props接收这个对象，但路由的id不可再通过props获取了</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">"/b/:id"</span>, <span class="attr">component</span>: B, <span class="attr">props</span>: &#123; <span class="attr">name</span>: <span class="string">"tom"</span>, <span class="attr">age</span>: <span class="number">22</span> &#125; &#125;,</span><br><span class="line">    <span class="comment">// 3.函数：在props中传递函数时该函数的返回值可以通过props接收</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/c/:id"</span>,</span><br><span class="line">      component: C,</span><br><span class="line">      props: <span class="function"><span class="keyword">function</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">"jack"</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">id</span>: route.params.id &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  props: [<span class="string">"id"</span>],</span><br><span class="line">  template: <span class="string">"&lt;div&gt;组件A,获取到的ID值为&#123;&#123;id&#125;&#125;&lt;div&gt;"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  props: [<span class="string">"name"</span>, <span class="string">"age"</span>],</span><br><span class="line">  template: <span class="string">"&lt;div&gt;组件B,名字：&#123;&#123;name&#125;&#125;,年龄：&#123;&#123;age&#125;&#125;&lt;div&gt;"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> C = &#123;</span><br><span class="line">  props: [<span class="string">"name"</span>, <span class="string">"age"</span>, <span class="string">"id"</span>],</span><br><span class="line">  template: <span class="string">"&lt;div&gt;组件C,名字：&#123;&#123;name&#125;&#125;,年龄：&#123;&#123;age&#125;&#125;,id值：&#123;&#123;id&#125;&#125;&lt;div&gt;"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><blockquote>
<p>在路由规则里添加name属性，方便路由跳转</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- to需要改为动态绑定的形式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">route-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'leo',params:&#123;id:2&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">route-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">  routes:[</span><br><span class="line"><span class="actionscript">    &#123;path:<span class="string">'/a/:id'</span>,name:<span class="string">'leo'</span>,component:A&#125;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 这种跳转到name的方式和 router.push()方法是一样的：</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// router.push(&#123;name:'leo',params:&#123;id:2&#125;&#125;)</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><blockquote>
<p>常用的编程式导航有：</p>
<p><code>this.$router.push(&#39;hash地址&#39;)</code> 跳转到hash地址</p>
<p><code>this.$router.go(n)</code> 这里n为整数，正数为往后跳转n页，负数为往前跳转n页</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>axios安装与使用</title>
    <url>/axios/</url>
    <content><![CDATA[<h2 id="什么是axios"><a href="#什么是axios" class="headerlink" title="什么是axios?"></a>什么是axios?</h2><blockquote>
<p>axios （<a href="https://github.com/axios/axios" target="_blank" rel="noopener">官网</a>） 是一个基于Promise的HTTP库，可用在浏览器和node.js中，它有以下特点：</p>
<ul>
<li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequests</a></li>
<li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> 请求</li>
<li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> API</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li>
</ul>
</blockquote>
<h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><p>安装：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>

<p>常用api：</p>
<blockquote>
<p>get： 查询数据、post： 添加数据、put： 修改数据、delete： 删除数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'url'</span>).then(<span class="function"><span class="params">ret</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ret.data)</span><br><span class="line">  <span class="comment">//data属性名是固定的用于获取后台响应的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="axios传递参数"><a href="#axios传递参数" class="headerlink" title="axios传递参数"></a>axios传递参数</h2><h3 id="get传递参数"><a href="#get传递参数" class="headerlink" title="get传递参数"></a>get传递参数</h3><p>通过url传递参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'/url?id=123'</span>).then(...)</span><br><span class="line">axios.get(<span class="string">'/url/123'</span>).then(...)</span><br></pre></td></tr></table></figure>

<p>通过params选项传递参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'/url'</span>,&#123;</span><br><span class="line">  params: &#123;<span class="attr">id</span>:<span class="number">123</span>&#125;</span><br><span class="line">&#125;).then(...)</span><br></pre></td></tr></table></figure>

<p><strong>delete传递参数使用方法和get一样</strong></p>
<h3 id="post传递参数"><a href="#post传递参数" class="headerlink" title="post传递参数"></a>post传递参数</h3><p>通过选项传递参数（默认json格式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">'/url'</span>,&#123;</span><br><span class="line">  uname: <span class="string">'tom'</span></span><br><span class="line">  pwd: <span class="number">123456</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>通过URLSearchParams传递参数（application/x-www-form-urlencoded）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params=<span class="keyword">new</span> URLSearchParams();</span><br><span class="line">params.append(<span class="string">'param1'</span>,<span class="string">'value1'</span>);</span><br><span class="line">params.append(<span class="string">'param2'</span>,<span class="string">'value2'</span>);</span><br><span class="line">axios.post(<span class="string">'/url'</span>,params).then(...)</span><br></pre></td></tr></table></figure>

<p><strong>put传递参数使用方法和post一样</strong></p>
<h2 id="响应结果"><a href="#响应结果" class="headerlink" title="响应结果"></a>响应结果</h2><blockquote>
<p>data：实际响应回来的数据</p>
<p>headers：响应头信息</p>
<p>status：响应状态码</p>
<p>statusText：响应状态信息</p>
</blockquote>
<p>使用axios返回的<code>“类json”</code> 数据会自动转换成json格式无需自己转</p>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超时时间</span></span><br><span class="line">axios.defaults.timeout=<span class="number">3000</span>; </span><br><span class="line"><span class="comment">// 默认地址</span></span><br><span class="line">axios.defaults.baseURL=<span class="string">'http://www.xxx.com'</span></span><br><span class="line"><span class="comment">// 设置请求头</span></span><br><span class="line">axios.defaults.headers[<span class="string">'mytoken'</span>]=<span class="string">'xxxxxx'</span></span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 发请求前设置一些信息</span></span><br><span class="line">  <span class="keyword">return</span> config；</span><br><span class="line">&#125;，<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 处理响应的错误信息 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 处理返回的数据</span></span><br><span class="line">  <span class="keyword">return</span> res；</span><br><span class="line">&#125;，<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 处理响应的错误信息 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><blockquote>
<ul>
<li>async/await是ES7引入的新语法，可以更方便异步操作</li>
<li>async关键字用于函数上（async函数的返回值上promise实例对象）</li>
<li>await关键字用于async函数中（await可以得到异步的结果）</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret= <span class="keyword">await</span> axios.get(<span class="string">'/url'</span>);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">fn1.then(<span class="function"><span class="params">ret</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise总结</title>
    <url>/Promise/</url>
    <content><![CDATA[<h2 id="什么是promise？"><a href="#什么是promise？" class="headerlink" title="什么是promise？"></a>什么是promise？</h2><blockquote>
<p>promise是用来解决异步操作回调地狱问题的，它有三种状态：</p>
<ol>
<li>pending: 初始状态，既不是成功，也不是失败状态。</li>
<li>resolved: 意味着操作成功完成。</li>
<li>rejected: 意味着操作失败。</li>
</ol>
</blockquote>
<h2 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="keyword">return</span> resolve(<span class="string">"成功信息"</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="string">"失败信息"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">p.then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 第一个函数接收成功信息，如果promise返回的是resolve则调用此函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// "成功信息"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 第二个函数接收失败信息，如果promise返回的是reject则调用此函数，此函数可以省略用catch()接收失败信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法:"></a>实例方法:</h2><blockquote>
<p>then()、catch()、finally()</p>
<p>这里的finally()不是标准方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="keyword">return</span> resolve(<span class="string">"成功信息"</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="string">"失败信息"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//成功调用这里</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//失败调用这里</span></span><br><span class="line">&#125;).finally(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//不管成功还是失败都会调用这里</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="对象方法："><a href="#对象方法：" class="headerlink" title="对象方法："></a>对象方法：</h2><blockquote>
<ul>
<li><p>Promise.all()</p>
<p>接收一个Promise对象组成的数组作为参数，当这个数组里的所有Promise对象全部变为resolve的时候，该方法才返回resolve状态结果。但如果数组中有一个Promise对象为reject的话，则直接返回reject状态结果</p>
</li>
<li><p>Promise.race()</p>
<p>使用方法和Promise.all一样，接收一个Promise对象组成的数组为参数。只要其中一个Promise对象变为Resolved或者Rejected状态，该方法直接返回相应状态的结果，进行后面的处理。</p>
</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    res(<span class="string">'a'</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    res(<span class="string">'b'</span>);</span><br><span class="line">  &#125;,<span class="number">150</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> p3=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    res(<span class="string">'c'</span>);</span><br><span class="line">  &#125;,<span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> pro1=<span class="built_in">Promise</span>.all([p1,p2,p3]);</span><br><span class="line">pro1.then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(data)) <span class="comment">//["a", "b", "c"]</span></span><br><span class="line"><span class="keyword">var</span> pro2=<span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br><span class="line">pro2.then(<span class="function"><span class="params">data</span>=&gt;</span><span class="built_in">console</span>.log(pp)) </span><br><span class="line"><span class="comment">// 这里由于是p2先执行，返回的是resolve，所以结果为：Promise &#123;&lt;resolved&gt;: "b"&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件总结</title>
    <url>/vue%E7%BB%84%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义全局组件</span></span><br><span class="line">Vue.component(<span class="string">'myComponent'</span>,Vue.extend(template:<span class="string">'&lt;div&gt;xxxx&lt;/div&gt;'</span>))</span><br><span class="line"><span class="comment">//这种写法相当于(此时会自动调用Vue.extend()方法)：</span></span><br><span class="line">Vue.component(<span class="string">'myComponent'</span>，&#123;<span class="attr">template</span>:<span class="string">'&lt;div&gt;xxxx&lt;/div&gt;'</span>&#125;)</span><br><span class="line"><span class="comment">//2.定义私有组件</span></span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">'#app'</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    ‘myComponent’:&#123;</span><br><span class="line">      template:<span class="string">'&lt;div&gt;xxxx&lt;/div&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果组件名称使用了驼峰命名，则在引用组件的时候，需要把大写的字母改为小写，同时两个单词之间使用 - 链接；</strong></p>
<h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><h3 id="1-父组件向子组件传值"><a href="#1-父组件向子组件传值" class="headerlink" title="1.父组件向子组件传值"></a>1.父组件向子组件传值</h3><blockquote>
<p>父组件通过属性传值给子组件，子组件使用props接收值。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mycom</span> <span class="attr">:title</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      info:<span class="string">'父组件的数据'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'mycom'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'title'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p><strong>1.父组件传值时，是在子组件引用的元素上添加属性，props接受的是属性名而不是属性值，使用时也同理。</strong></p>
<p><strong>2.如果父组件传值时属性名是‘my-data’这种带横杠的，则子组件在用props接收时需要写成驼峰命名‘myData’</strong></p>
<p><strong>3.props可以接收字符串、数字、布尔值、数组和对象几种类型的值</strong></p>
<h3 id="2-子组件向父组件传值"><a href="#2-子组件向父组件传值" class="headerlink" title="2.子组件向父组件传值"></a>2.子组件向父组件传值</h3><blockquote>
<p>子组件通过自定义事件的方式传值给父组件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mycom</span> @<span class="attr">change99</span>=<span class="string">'fn($event)'</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line">      num:88</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      fn(n)&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.parnum=n</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'mycom'</span>:&#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('change99',99)"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p><strong>1.子组件触发事件时，通过$emit(funName,arg)给父组件传递参数,$emit的第一个参数是子组件引用时添加的自定义事件名，后面的参数是给父组件传递的数据</strong></p>
<p><strong>2.父组件需要通过$event接收数据</strong></p>
<h3 id="非父子组件间传值"><a href="#非父子组件间传值" class="headerlink" title="非父子组件间传值"></a>非父子组件间传值</h3><blockquote>
<ol>
<li><p>单独的事件中心管理组件中的通信</p>
<p>new Vue()</p>
</li>
<li><p>监听事件与销毁事件</p>
<p>$on、$off</p>
</li>
<li><p>触发事件</p>
<p>$emit</p>
</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Tom组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test-tom</span>&gt;</span><span class="tag">&lt;/<span class="name">test-tom</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jack组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test-jack</span>&gt;</span><span class="tag">&lt;/<span class="name">test-jack</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>销毁事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//提供事件中心,组件之间的通欣必须经过事件中心</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> hub=<span class="keyword">new</span> Vue();</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'test-tom'</span>,&#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line">        num:0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tom:</span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>改变jack<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      handle()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//触发jack的事件</span></span></span><br><span class="line"><span class="actionscript">        hub.$emit(<span class="string">'jack-event'</span>,<span class="number">1</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 事件监听</span></span></span><br><span class="line"><span class="actionscript">      hub.$on(<span class="string">'tom-event'</span>,(val)=&gt;&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.num+=val;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'test-jack'</span>,&#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line">        num:0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Jack:</span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>改变tom<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      handle()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//触发Tom的事件</span></span></span><br><span class="line"><span class="actionscript">        hub.$emit(<span class="string">'tom-event'</span>,<span class="number">2</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">//事件监听</span></span></span><br><span class="line"><span class="actionscript">      hub.$on(<span class="string">'jack-event'</span>,(val)=&gt;&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.num+=val;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      handle()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 销毁事件,销毁后事件不再可用</span></span></span><br><span class="line"><span class="actionscript">        hub.$off(<span class="string">'tom-event'</span>);</span></span><br><span class="line"><span class="actionscript">        hub.$off(<span class="string">'jack-event'</span>);</span></span><br><span class="line">      &#125;		</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><blockquote>
<p>父组件向子组件传递内容</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">temp</span>&gt;</span>晴<span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">temp</span>&gt;</span>多云<span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">temp</span>&gt;</span>小雪<span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'temp'</span>,&#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      今天天气是:</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line">	/* 显示效果是：		 </span><br><span class="line">  今天天气是: 晴</span><br><span class="line">  今天天气是: 多云</span><br><span class="line">  今天天气是: 小雪*/</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：组件模版中使用插槽必须是slot标签</strong></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>iterm2终端配置</title>
    <url>/iterm2%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装dracula主题"><a href="#安装dracula主题" class="headerlink" title="安装dracula主题"></a>安装dracula主题</h2><p>1.克隆Dracula主题</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">https</span>://github.com/dracula/iterm.git</span><br></pre></td></tr></table></figure>

<p>2.在iterm上<code>command</code>+<code>,</code> 弹出偏好设置&gt;profiles&gt;colors&gt;color presets&gt;import导入Dracula.itermcolors文件，再profiles&gt;colors&gt;color presets选择Dracula。</p>
<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 安装oh my zsh</span><br><span class="line">$ git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"></span><br><span class="line">## 如果丢失.zshrc文件用以下命令生成：</span><br><span class="line">$ cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"></span><br><span class="line">## 切换默认shell为zsh</span><br><span class="line">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<h2 id="更换zsh主题为Dracula"><a href="#更换zsh主题为Dracula" class="headerlink" title="更换zsh主题为Dracula"></a>更换zsh主题为Dracula</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">## 下载主题文件</span><br><span class="line">$ git clone https://github.com/dracula/zsh.git</span><br></pre></td></tr></table></figure>

<p>复制 <code>dracula.zsh-theme</code> 和 <code>lib</code> 文件夹文件到 <code>~/.oh-my-zsh/themes</code> 下。</p>
<p>修改zsh主题。编辑~(用户名)下.zshrc文件，</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc </span><br><span class="line"># 之后按i进入编辑模式，修改ZSH_THEME为"dracula"</span><br><span class="line"># control+C</span><br><span class="line"># <span class="built_in">shift</span>+:</span><br><span class="line"># wq! 回车</span><br></pre></td></tr></table></figure>

<h2 id="高亮插件"><a href="#高亮插件" class="headerlink" title="高亮插件"></a>高亮插件</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 下载命令高亮插件 这里下载到用户名下.zsh文件夹下</span><br><span class="line">$ sudo git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting</span><br><span class="line"> </span><br><span class="line"># 编辑~/.zshrc文件，添加以下内容：</span><br><span class="line">source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure>

<h2 id="命令提示插件"><a href="#命令提示插件" class="headerlink" title="命令提示插件"></a>命令提示插件</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 下载命令提示</span><br><span class="line">$ sudo git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br><span class="line"> </span><br><span class="line"># 编辑~/.zshrc文件，添加以下内容：</span><br><span class="line">source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure>

<h2 id="颜色配置"><a href="#颜色配置" class="headerlink" title="颜色配置"></a>颜色配置</h2><p>我的颜色配置效果如下：</p>
<p><img src="/iterm2终端配置/iterm-color.png" alt></p>
<p>百度网盘链接:<a href="https://pan.baidu.com/s/1bVsfoj9B8-YHrADI1KfP3w" target="_blank" rel="noopener">https://pan.baidu.com/s/1bVsfoj9B8-YHrADI1KfP3w</a>  密码:ty5t，</p>
<p>下载好之后在iterm上 <code>command</code>+<code>,</code> 弹出偏好设置&gt;profiles&gt;colors&gt;color presets&gt;import导入刚刚下载的文件就行！</p>
]]></content>
      <categories>
        <category>Mac工具及技巧</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo同时提交到Github和Conding</title>
    <url>/Hexo%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0Github%E5%92%8CConding/</url>
    <content><![CDATA[<blockquote>
<p>hexo博客发布在GitHub上访问速度太慢，决定迁移到conding上</p>
</blockquote>
<p>conding官网：<a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a></p>
<ol>
<li><p>我们选择个人版登录，没有账号的自行注册，成功后创建一个空的项目，项目名和用户名一样</p>
</li>
<li><p>创建好项目后点击右上角头像&gt;个人设置&gt;SSH公钥&gt;新建公钥，把自己的公钥粘贴上去，如何创建公钥详情见我另一篇文章 ：<a href="https://www.code7s.com/20190731/1/">Hexo+github搭建NexT主题个人博客</a></p>
</li>
<li><p>在站点配置文件 <code>_config.yml</code> 中找到 <code>deploy</code>字段，修改成以下配置：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="bullet">  - </span>type: git</span><br><span class="line"><span class="code">    repo: </span></span><br><span class="line"><span class="code">      github: git@github.com:Code7s/code7s.github.io.git</span></span><br><span class="line"><span class="code">      coding: git@git.dev.tencent.com:Code7s/code7s.git</span></span><br><span class="line"><span class="code">    branch: master</span></span><br><span class="line"><span class="bullet">  - </span>type: baidu<span class="emphasis">_url_</span>submitter</span><br></pre></td></tr></table></figure>

<p><strong>注：GitHub和conding的地址写自己的。</strong></p>
</li>
<li><p>运行<code>hexo g -d</code> 将代码同步到GitHub和conding</p>
</li>
<li><p>进入conding项目&gt;代码&gt;Pages服务&gt;一键部署，就可以通过 <code>Code7s.coding.me</code> 来访问博客了</p>
</li>
<li><p>如果想要用自己的域名则需要在域名 DNS 设置中添加一条CNAME记录指向Code7s.coding.me，我这用的是华为云的域名解析：</p>
<p><img src="/Hexo同时提交到Github和Conding/ymjx.png" alt="ymjx"></p>
</li>
<li><p>创建解析后在conding项目的pages服务设置中绑定添加的域名，并启用强制HTTPS访问就OK了！！！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下如何修改hosts文件</title>
    <url>/Mac%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9hosts%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>打开终端,输入：</p>
<p><code>sudo vim /private/etc/hosts</code></p>
<p>然后输入密码之后弹出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">E325: <span class="title">ATTENTION</span></span></span><br><span class="line"><span class="function"><span class="title">Found</span> <span class="title">a</span> <span class="title">swap</span> <span class="title">file</span> <span class="title">by</span> <span class="title">the</span> <span class="title">name</span> "/<span class="title">private</span>/<span class="title">etc</span>/.<span class="title">hosts.swp</span>"</span></span><br><span class="line"><span class="function">          <span class="title">owned</span> <span class="title">by</span>: <span class="title">root</span>   <span class="title">dated</span>: <span class="title">Wed</span> <span class="title">Nov</span> 13 23:16:00 2019</span></span><br><span class="line"><span class="function">         <span class="title">file</span> <span class="title">name</span>: /<span class="title">private</span>/<span class="title">etc</span>/<span class="title">hosts</span></span></span><br><span class="line"><span class="function">          <span class="title">modified</span>: <span class="title">YES</span></span></span><br><span class="line"><span class="function">         <span class="title">user</span> <span class="title">name</span>: <span class="title">root</span>   <span class="title">host</span> <span class="title">name</span>: <span class="title">qi.local</span></span></span><br><span class="line"><span class="function">        <span class="title">process</span> <span class="title">ID</span>: 3394</span></span><br><span class="line"><span class="function"><span class="title">While</span> <span class="title">opening</span> <span class="title">file</span> "/<span class="title">private</span>/<span class="title">etc</span>/<span class="title">hosts</span>"</span></span><br><span class="line"><span class="function">             <span class="title">dated</span>: <span class="title">Thu</span> <span class="title">Nov</span> 14 01:02:30 2019</span></span><br><span class="line"><span class="function">      <span class="title">NEWER</span> <span class="title">than</span> <span class="title">swap</span> <span class="title">file</span>!</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">(1) <span class="title">Another</span> <span class="title">program</span> <span class="title">may</span> <span class="title">be</span> <span class="title">editing</span> <span class="title">the</span> <span class="title">same</span> <span class="title">file</span>.  <span class="title">If</span> <span class="title">this</span> <span class="title">is</span> <span class="title">the</span> <span class="title">case</span>,</span></span><br><span class="line"><span class="function">    <span class="title">be</span> <span class="title">careful</span> <span class="title">not</span> <span class="title">to</span> <span class="title">end</span> <span class="title">up</span> <span class="title">with</span> <span class="title">two</span> <span class="title">different</span> <span class="title">instances</span> <span class="title">of</span> <span class="title">the</span> <span class="title">same</span></span></span><br><span class="line"><span class="function">    <span class="title">file</span> <span class="title">when</span> <span class="title">making</span> <span class="title">changes</span>.  <span class="title">Quit</span>, <span class="title">or</span> <span class="title">continue</span> <span class="title">with</span> <span class="title">caution</span>.</span></span><br><span class="line"><span class="function">(2) <span class="title">An</span> <span class="title">edit</span> <span class="title">session</span> <span class="title">for</span> <span class="title">this</span> <span class="title">file</span> <span class="title">crashed</span>.</span></span><br><span class="line"><span class="function">    <span class="title">If</span> <span class="title">this</span> <span class="title">is</span> <span class="title">the</span> <span class="title">case</span>, <span class="title">use</span> ":<span class="title">recover</span>" <span class="title">or</span> "<span class="title">vim</span> -<span class="title">r</span> /<span class="title">private</span>/<span class="title">etc</span>/<span class="title">hosts</span>"</span></span><br><span class="line"><span class="function">    <span class="title">to</span> <span class="title">recover</span> <span class="title">the</span> <span class="title">changes</span> (<span class="title">see</span> ":<span class="title">help</span> <span class="title">recovery</span>").</span></span><br><span class="line"><span class="function">    <span class="title">If</span> <span class="title">you</span> <span class="title">did</span> <span class="title">this</span> <span class="title">already</span>, <span class="title">delete</span> <span class="title">the</span> <span class="title">swap</span> <span class="title">file</span> "/<span class="title">private</span>/<span class="title">etc</span>/.<span class="title">hosts.swp</span>"</span></span><br><span class="line"><span class="function">    <span class="title">to</span> <span class="title">avoid</span> <span class="title">this</span> <span class="title">message</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Swap</span> <span class="title">file</span> "/<span class="title">private</span>/<span class="title">etc</span>/.<span class="title">hosts.swp</span>" <span class="title">already</span> <span class="title">exists</span>!</span></span><br><span class="line"><span class="function">[<span class="title">O</span>]<span class="title">pen</span> <span class="title">Read</span>-<span class="title">Only</span>, (<span class="title">E</span>)<span class="title">dit</span> <span class="title">anyway</span>, (<span class="title">R</span>)<span class="title">ecover</span>, (<span class="title">D</span>)<span class="title">elete</span> <span class="title">it</span>, (<span class="title">Q</span>)<span class="title">uit</span>, (<span class="title">A</span>)<span class="title">bort</span>:</span></span><br></pre></td></tr></table></figure>

<p>按E键再按I就可以进行编辑</p>
<p>编辑完成之后 <code>control</code> + <code>C</code>退出编辑，再按<code>Shift</code> + <code>:</code> 输入 <code>:wq!</code> 强制修改hosts!!!</p>
]]></content>
      <categories>
        <category>Mac工具及技巧</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>git指令总结</title>
    <url>/git%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>选择对应系统下载安装</p>
<h2 id="仓库操作"><a href="#仓库操作" class="headerlink" title="仓库操作"></a>仓库操作</h2><ol>
<li><p>设置用户名和邮箱（不加设置就是查看) </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;code7s&quot;</span><br><span class="line">git config --global user.email &quot;code7s@qq.com&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化版本库</p>
<p>在当前文件夹创建一个git仓库 <code>git init</code> 最直观的就是当前目录下多出了.git文件夹(windows下需要显示隐藏文件夹才能看到，linux下需要<code>ls -a</code>)</p>
<blockquote>
<p>说明：这里所有的命令在命令行中都可以 添加 –help弹出官方帮助文档 ，例如 <code>git add --help</code>查看git add的使用说明。</p>
</blockquote>
</li>
<li><p>添加文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add filename</span><br><span class="line">git add .	(全部添加到暂存区)</span><br></pre></td></tr></table></figure>
</li>
<li><p>从暂存区域提交代码到代码仓库，-m后面为提交说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看仓库状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="退回操作"><a href="#退回操作" class="headerlink" title="退回操作"></a>退回操作</h2><ol>
<li><p>从暂存区退回到工作区</p>
<ul>
<li><p>修改了HEAD指向（git仓库版本回退到之前版本）</p>
</li>
<li><p>将代码仓库上个版本的文件覆盖到暂存区域，用以撤销上次的提交，（此时暂存区内容已经回到上个版本，但是工作区还是最新版本)</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>把工作区的内容退回暂存区的内容(如果暂存区没内容则退回代码仓库的内容)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看版本提交历史记录和版本ID(按Q键退出查看) </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
</li>
<li><p>工作区和代码仓库都退回到指定ID版本（会清空暂存区）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard id</span><br></pre></td></tr></table></figure>
</li>
<li><p>单独某个文件退回到指定ID版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout commit id filename</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="对比操作"><a href="#对比操作" class="headerlink" title="对比操作"></a>对比操作</h2><ol>
<li><p>查看工作区和暂存区的对比</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看暂存区和代码库的对比(两种方式都行)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看工作区和代码仓库库master分支的对比</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff master</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ol>
<li><p>创建新分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch name</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换分支(可以添加-b参数新建的同时切换到新分支)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout name</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并到当前分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge name</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d name</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><ol>
<li><p>撤销提交(误提交之后想重新提交时撤销提交)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除暂存区的文件(前提是工作区已经删除此文件)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时删除工作区和暂存区的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -f filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>仅删除暂存区的文件保留工作区的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached filename</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><ol>
<li><p>查看所有标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag name</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定提交信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -a name -m &quot;xxxx&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -d name</span><br></pre></td></tr></table></figure>
</li>
<li><p>标签发布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin name</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="远程仓库与其它操作"><a href="#远程仓库与其它操作" class="headerlink" title="远程仓库与其它操作"></a>远程仓库与其它操作</h2><ol>
<li><p>创建SSH key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>

<p> 测试是否连通github：<code>ssh -T git@github.com</code></p>
</li>
<li><p>克隆项目到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Code7s/git.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:xxxxx.git</span><br><span class="line">git push -u origin master</span><br><span class="line">// 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看所有git配置 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack学习总结</title>
    <url>/webpack%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack?"></a>什么是webpack?</h2><blockquote>
<p>webpack是一个流行的前端打包工具，它提供了友好的模块化支持和代码压缩混淆、处理js兼容、性能优化等强大功能，大大提高了开发效率和项目等可维护性！</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>新建一个项目文件夹</p>
</li>
<li><p>进入项目根目录初始化配置: <code>npm init -y</code> ,根目录下就会新建一个 <code>package.json</code> 文件.</p>
</li>
<li><p>安装 <code>webpack</code> 、 <code>webpack-cli</code> </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i -D webpack webpack-cli</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在根目录下新建 <code>webpack.config.js</code> 文件,用来做webpack的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入node.js中专门操作路径的模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  <span class="comment">//打包入口文件路径</span></span><br><span class="line">  entry: path.join(__dirname,<span class="string">'./src/index.js'</span>), </span><br><span class="line">  <span class="comment">//指定构建模式：</span></span><br><span class="line">  <span class="comment">//1.development:开发模式，打包不会压缩混淆，转化速度快</span></span><br><span class="line">  <span class="comment">//2.production:上线模式，打包会自动对代码进行压缩和各种优化。</span></span><br><span class="line">  mode: <span class="string">'development'</span>, </span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">//输出文件存放路径</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">//输出文件名称</span></span><br><span class="line">    filename: <span class="string">'main.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>新建一些基本的文件,结构如下:</p>
<p><img src="/webpack学习总结/webpack.png" alt></p>
<p>编辑index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>隔行变色demo--Webpack初次打包<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编辑index.js </p>
<blockquote>
<p>编辑之前通过 <code>npm i jquery -P</code> 安装jquery依赖</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js 是项目的入口文件</span></span><br><span class="line"><span class="comment">// 1.导入jquery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span> <span class="comment">//ES6导入模块的方式</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  $(<span class="string">'li:odd'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'red'</span>)</span><br><span class="line">  $(<span class="string">'li:even'</span>).css(<span class="string">'backgroundColor'</span>,<span class="string">'orange'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>当一切配置完成后就可以运行 <code>npx webpack</code> 进行打包了!!!</p>
<p>显示如下就代表打包成功了,在dist文件夹下就会多出一个打包后的文件 <code>main.js</code> </p>
<p><img src="/webpack学习总结/webpack1.png" alt></p>
<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><blockquote>
<p>webpack-dev-server 是用来实现webpack自动打包编译的工具</p>
</blockquote>
<p>本地安装: <code>npm i webpack-dev-server -D</code></p>
<h3 id="第一种配置方式"><a href="#第一种配置方式" class="headerlink" title="第一种配置方式"></a>第一种配置方式</h3><p>在项目根目录下配置package.json文件,在 “script” 字段下添加一项dev命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open --port 3000 --contentBase src --hot 128.0.0.1"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p> 后面参数的意思:</p>
<p>​    <code>--open</code>    自动打开浏览器; </p>
<p>​    <code>--port 3000</code>    使用3000端口;</p>
<p>​    <code>--contentBase src</code>    以src作为根目录打开页面</p>
<p>​    <code>--hot</code>    开启热更新</p>
<h3 id="第二种配置方式"><a href="#第二种配置方式" class="headerlink" title="第二种配置方式"></a>第二种配置方式</h3><p>同样在项目根目录下 <code>package.json</code> 文件中,在 “script” 字段下添加一项配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>然后在 <code>webpack.config.js</code> 文件中添加如下配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);<span class="comment">// 启用热更新(第二步)</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123; <span class="comment">// devServer是webpack-dev-server的配置</span></span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    port: <span class="number">3000</span>, <span class="comment">// 启动时运行3000端口</span></span><br><span class="line">    contentBase: <span class="string">'src'</span>, <span class="comment">// 设置托管根目录</span></span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// 启用热更新(第一步)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [ <span class="comment">// 配置插件的节点</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">// new一个热更新的模块对象  启用热更新(第三步)</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="自动打包编译"><a href="#自动打包编译" class="headerlink" title="自动打包编译"></a>自动打包编译</h3><p>配置完了之后运行 <code>npm run dev</code> 就可以自动打包编译了,不过需要注意的是:</p>
<p><strong>启动webpack-dev-server后，你在目标文件夹中是看不到编译后的文件的,实时编译后的文件都保存到了内存当中,我们可以认为 webpack-dev-server 把打包好的文件是以一种虚拟的形式托管到了项目的根目录中</strong></p>
<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><blockquote>
<p>html-webpack-glugin 是用来直接为项目生成HTML文件(存在内存中)，并将webpack打包后输出的所有脚本文件自动添加到插件生成的HTML文件中。通过配置可以将根目录下用户自定义的HTML文件作为插件生成HTML文件的模板。另外，还可以通过向插件传递参数控制HTML文件的输出。</p>
</blockquote>
<p>本地安装: <code>cnpm i html-webpack-plugin -D</code></p>
<p>在 <code>webpack.config.js</code> 中引入这个插件并创建实例对象:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlWebpackPlugin= <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlPlugin <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">  template: path.join(__dirname,<span class="string">'./src/index.html'</span>),<span class="comment">// 要生成到内存中的文件模板</span></span><br><span class="line">  filename: <span class="string">'index.html'</span> <span class="comment">// 生成到内存中的文件名</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后在module.exports里的plugin属性上挂载:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugin: [htmlPlugin]</span><br></pre></td></tr></table></figure>

<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><blockquote>
<p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p>
<p>Babel就是为了支持原有的旧的环境。</p>
</blockquote>
<p>安装相关依赖: </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm i babel-loader @babel/core @babel/runtime -D</span><br><span class="line">cnpm i @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</span><br></pre></td></tr></table></figure>

<p>这里如果出现报错: <code>peerDependencies WARNING babel-loader@* requires a peer of @babel/core@^7.0.0 but none was installed</code>,说明版本更新了,可以按他的提示安装:<code>cnpm i babel-loader@7</code></p>
<p>在根目录中新建一个 <code>babel.config.js</code> 配置文件:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: ['@babel/preset-env'],</span><br><span class="line">  plugins: ['@babel/plugin-transform-runtime','@babel/plugin-proposal-class-properties']</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>webpack.config.js</code> 中module属性下做如下配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: [<span class="string">'babel-loader'</span>], <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;</span><br><span class="line">    <span class="comment">//需要通过exclude排除node_modules文件夹的转换</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置好了之后打包就会自动把ES6语法转换成浏览器能识别的语法了!</p>
<h2 id="css-loader-amp-amp-style-loader"><a href="#css-loader-amp-amp-style-loader" class="headerlink" title="css-loader &amp;&amp; style-loader"></a>css-loader &amp;&amp; style-loader</h2><blockquote>
<p>webpack 默认只可以打包js文件,如果想要打包 css的时候 就需要引入 style-loader  和 css-loader两个插件</p>
<p><strong>css-loader 的作用是把 css文件进行转码,style-loader 的作用是把转码后的css文件插入到相应的文件中去,所以两者使用的时候是一起使用的缺一不可并且有先后顺序的,先css-loader后style-loader</strong></p>
</blockquote>
<p>本地安装: <code>cnpm i css-loader style-loader -D</code></p>
<p>在 <code>webpack.config.js</code> 中添加一项和plugins平级的属性 module,做以下配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123; <span class="comment">//配置所有第三方模块加载器</span></span><br><span class="line">  rules: [ <span class="comment">//匹配规则</span></span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>] &#125;</span><br><span class="line">    <span class="comment">// 注意:use下的style-loader和css-loader不能写反了,因为使用的时候是从后向前的，所以会先使用 css-loader转换，再使用 style-loader 插入</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="less-loader-amp-amp-sass-loader"><a href="#less-loader-amp-amp-sass-loader" class="headerlink" title="less-loader &amp;&amp; sass-loader"></a>less-loader &amp;&amp; sass-loader</h2><blockquote>
<p>less-loader 的作用是把less文件转成css文件,由于它依赖于less所以在安装less-loader的同时也需要安装less</p>
<p>sass-loader 的作用是把sass文件转成css文件,由于它依赖于node-sass所以在安装sass-loader的同时也需要安装node-sass</p>
</blockquote>
<p>本地安装: <code>cnpm i less-loader less -D</code>  <code>cnpm i sass-loader node-sass -D</code></p>
<p>安装sass-loader时如果报错:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">peerDependencies WARNING sass-loader@^<span class="number">8</span>.<span class="number">0</span>.<span class="number">0</span> requires a peer of sass@^<span class="number">1</span>.<span class="number">3</span>.<span class="number">0</span> but none was installed</span><br><span class="line">peerDependencies WARNING sass-loader@^<span class="number">8</span>.<span class="number">0</span>.<span class="number">0</span> requires a peer of fibers@&gt;= <span class="number">3</span>.<span class="number">1</span>.<span class="number">0</span> but none was installed</span><br></pre></td></tr></table></figure>

<p>说明 sass-loader8.0有些节点版本不对应,则安装7版本的sass-loader就行:</p>
<p><code>cnpm i sass-loader@7</code></p>
<p>在安装less时可能也会出现同样情况,只需降低版本即可!</p>
<p>在 <code>webpack.config.js</code> 中module属性下做如下配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>] &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="posts-loader-amp-amp-autoprefixer"><a href="#posts-loader-amp-amp-autoprefixer" class="headerlink" title="posts-loader&amp;&amp;autoprefixer"></a>posts-loader&amp;&amp;autoprefixer</h2><blockquote>
<p>postCSS可以自动帮我们在css前加上用于兼容问题的浏览器前缀</p>
</blockquote>
<p>安装：<code>cnpm i postcss-loader autoprefixer -D</code> </p>
<p>在 <code>webpack.config.js</code> 中添加:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入包</span></span><br><span class="line"><span class="keyword">const</span> autoprefixer=<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 挂载到plugin上</span></span><br><span class="line">  plugin:[autoprefixer],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 添加规则</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>,<span class="string">'post-loader'</span>] &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="url-loader-amp-amp-flie-loader"><a href="#url-loader-amp-amp-flie-loader" class="headerlink" title="url-loader &amp;&amp; flie-loader"></a>url-loader &amp;&amp; flie-loader</h2><blockquote>
<p>url-loader会将引入的图片编码，生成dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片</p>
<p>file-loader可以解析项目中的url引入,根据我们的配置修改打包后文件引用路径，使之指向正确的文件。</p>
</blockquote>
<p>本地安装: <code>cnpm i url-loader flie-loader -D</code></p>
<p>在 <code>webpack.config.js</code> 中module属性下做如下配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(jpg|jpeg|png|gif|ttf|eot|woff|woff2|bmp|svg)$/</span>,</span><br><span class="line">      use: [<span class="string">'url-loader?limit=7000&amp;name=[hash:10]-[name].[ext]'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 'url-loader'可以做以下可选配置:</span></span><br><span class="line"><span class="comment">      limit: limit 给定的值是图片的大小，单位是byte(字节)，如果我们引用的图片≥给定的值,则不会被转为base64格式的字符串，如果图片&lt;给定的值,则会被转为base64的字符串</span></span><br><span class="line"><span class="comment">      name: 设置图片被编译后的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vue-loader-amp-amp-vue-template-compiler"><a href="#vue-loader-amp-amp-vue-template-compiler" class="headerlink" title="vue-loader &amp;&amp; vue-template-compiler"></a>vue-loader &amp;&amp; vue-template-compiler</h2><blockquote>
<p>webpack默认无法打包 <code>.vue</code> 文件,所以需要安装vue-loader 和 vue-template-compiler</p>
</blockquote>
<p>本地安装: <code>cnpm i vue-loader vue-template-compiler -D</code></p>
<p>在 <code>webpack.config.js</code> 中module属性下做如下配置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">use</span>: [<span class="string">'vue-loader'</span>] &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置好之后就可以打包 <code>.vue</code> 文件了</p>
<h3 id="vue-loader15-x-配置"><a href="#vue-loader15-x-配置" class="headerlink" title="vue-loader15.x 配置"></a>vue-loader15.x 配置</h3><p><strong>以上配置在vue-loader15.x版本会报错:<code>Module parse failed: Unexpected token (2:0)</code></strong></p>
<p>则需要在 <code>webpack.config.js</code> 里添加:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"><span class="keyword">new</span> VueLoaderPlugin(); <span class="comment">//这一行添加到 plugins 里</span></span><br></pre></td></tr></table></figure>

<p>配置好之后就不会报错了!</p>
<p>最后看下webpack中loader工作流程：</p>
<p><img src="/webpack学习总结/loader.jpg" alt="loader"></p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap学习笔记</title>
    <url>/Bootstrap/</url>
    <content><![CDATA[<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="流体容器"><a href="#流体容器" class="headerlink" title="流体容器"></a>流体容器</h3><ul>
<li><code>container-fluid</code></li>
</ul>
<h3 id="固定容器"><a href="#固定容器" class="headerlink" title="固定容器"></a>固定容器</h3><ul>
<li><code>container</code></li>
</ul>
<p>设可视区宽度为w(px):</p>
<table>
<thead>
<tr>
<th align="center">阈值</th>
<th align="center">width</th>
</tr>
</thead>
<tbody><tr>
<td align="center">w≥1200</td>
<td align="center">1170</td>
</tr>
<tr>
<td align="center">1200&gt;w≥992</td>
<td align="center">970</td>
</tr>
<tr>
<td align="center">992&gt;w≥768</td>
<td align="center">750</td>
</tr>
<tr>
<td align="center">768&gt;w</td>
<td align="center">auto</td>
</tr>
</tbody></table>
<h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>把父级width分为12块网格布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">        (占4份位置)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></span><br><span class="line">        (占6份位置)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2"</span>&gt;</span></span><br><span class="line">        (占2份位置)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看效果:</p>
<p><img src="/Bootstrap/sange.png" alt="Bootstrap"></p>
<h3 id="栅格系统4种选项"><a href="#栅格系统4种选项" class="headerlink" title="栅格系统4种选项"></a>栅格系统4种选项</h3><ul>
<li><code>col-lg</code></li>
<li><code>col-md</code></li>
<li><code>col-sm</code></li>
<li><code>col-xs</code></li>
</ul>
<table>
<thead>
<tr>
<th align="center">可视区宽度w</th>
<th align="center">垂直排列</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1200&gt;w</td>
<td align="center">col-lg</td>
</tr>
<tr>
<td align="center">992&gt;w</td>
<td align="center">col-md</td>
</tr>
<tr>
<td align="center">768&gt;w</td>
<td align="center">col-sm</td>
</tr>
</tbody></table>
<blockquote>
<p>col-xs不会随着可视区宽度减少而垂直排列</p>
</blockquote>
<h3 id="栅格系统偏移-排序"><a href="#栅格系统偏移-排序" class="headerlink" title="栅格系统偏移/排序"></a>栅格系统偏移/排序</h3><ul>
<li><code>col-sm-offset</code>        偏移</li>
<li><code>col-sm-push</code>        排序</li>
</ul>
<p>其它的选项(lg/md/xs)同样有这个方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-sm-offset-3"</span>&gt;</span></span><br><span class="line">        	偏移3个单位</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-sm-push-9"</span>&gt;</span></span><br><span class="line">        往后9个单位(push)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-9 col-sm-pull-3"</span>&gt;</span></span><br><span class="line">        往前3个单位(pull)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/Bootstrap/offset.png" alt="Bootstrap"></p>
<p>排序和偏移的区别</p>
<ul>
<li>偏移只能向右方向,排序可以左右方向</li>
<li>当有多个元素的时候,位置不够放时,偏移会换到下一行进行偏移,而排序则会继续超出容器不换行</li>
</ul>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ul>
<li><code>clearfix</code> 清除浮动</li>
<li><code>pull-left</code> 左浮动</li>
<li><code>pull-right</code> 右浮动</li>
</ul>
<p>不清除浮动:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/Bootstrap/noclear.png" alt="Bootstrap"></p>
<p>清除浮动:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">            col-sm-4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/Bootstrap/clearfix.png" alt="Bootstrap"></p>
<h2 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h2><ul>
<li><code>visible-*-*</code></li>
<li><code>hidden-*</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">visible-*-*</span></span><br><span class="line"><span class="comment">显示-屏幕选项-呈现特性</span></span><br><span class="line"><span class="comment">hidden没有呈现特性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1 visible-lg"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 只在lg屏下显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2 hidden-lg"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 只在lg屏下隐藏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3 visible-md-block"</span>&gt;</span>box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 只在md屏下显示且成块级元素特性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4 visible-md-inline-block"</span>&gt;</span>box4<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 只在md屏下显示且成行内块元素特性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4 visible-md-inline-block"</span>&gt;</span>box4<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 只在md屏下显示且成行内块元素特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在md屏下(1200&gt;w≥992)的效果:</p>
<p><img src="/Bootstrap/xys.png" alt></p>
<p><a href="https://v3.bootcss.com/css/#responsive-utilities" target="_blank" rel="noopener">打印类响应式工具文档</a></p>
<h2 id="Glyphicons-字体图标"><a href="#Glyphicons-字体图标" class="headerlink" title="Glyphicons 字体图标"></a>Glyphicons 字体图标</h2><p>使用方法:</p>
<ol>
<li>把从bootstrap下载的font文件夹放到html文件的根目录下:</li>
</ol>
<p><img src="/Bootstrap/font-icon.png" alt></p>
<p>​    也可以通过修改 <code>bootstrap.css</code> 里的 <code>font-face</code> 控制文件路径</p>
<ol start="2">
<li><p>在bootstrap官网的<a href="https://v3.bootcss.com/components/#glyphicons" target="_blank" rel="noopener">Glyphicons 字体图标库</a> 找到想用的图标复制class类名</p>
</li>
<li><p>之间在标签中命名即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon glyphicon-trash"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-play-circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>​    我们可以通过 <code>font-size</code> 控制字体图标的大小</p>
<p><a href="https://jingyan.baidu.com/article/f79b7cb346cf499145023e78.html" target="_blank" rel="noopener">如何自定义字体图标教程</a></p>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>按钮类适用于 <code>a</code> 、<code>button</code> 、<code>input</code> 标签</p>
<h3 id="按钮的不同样式"><a href="#按钮的不同样式" class="headerlink" title="按钮的不同样式"></a>按钮的不同样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提示类 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- defult/primary/success/info/warning/danger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"default"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"warning"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"danger"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 大小类 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从大到小 lg/md/sm/xs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-lg"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"lg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-md"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"md"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"sm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-xs"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"xs"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 状态类 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- active(选中状态)/disabled(禁用状态) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default active"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"active"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default disabled"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"disabled"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 性质类 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- block/inline/inline-block --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-block"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-inline"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"inline"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-inline-block"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"inline-block"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/Bootstrap/btn.png" alt></p>
<h3 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h3><ul>
<li><code>btn-group</code></li>
<li><code>btn-group-justified</code></li>
<li><code>btn-group-vertical</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按钮组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- btn-group-justified 自适应父级端点对齐 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- input/button必须给每个button加上个btn-group的父级 如果用的a标签则不需要 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-justified"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- btn-group-vertical 垂直排列 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- btn-group-vertical不需要配合btn-group使用 --&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group-vertical"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Top<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Bottom<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下拉箭头 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮和一些图标组合时不适合用input,可以用button和a标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>下拉<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/Bootstrap/btns.png" alt></p>
<p>未完待续…</p>
]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局总结(新版本)</title>
    <url>/7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看新版本之前,可以去看看我之前发布的老版本里轴和富裕空间的概念,如果已经了解可以跳过.</p>
<p><a href="https://www.code7s.com/6/">flex布局总结(老版本)</a></p>
<blockquote>
<p><strong><em>新版本flex只支持IE10及以上.安卓4.4及以上</em></strong></p>
</blockquote>
<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><p>先看看新版本布局:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#wrap</span>&#123;</span></span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>; <span class="comment">/* 新版本flex */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: red;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-flex-direction"><a href="#1-flex-direction" class="headerlink" title="1.flex-direction"></a>1.flex-direction</h3><p><strong><em>同时控制主轴是哪一根和主轴的方向</em></strong></p>
<p><code>row</code> 主轴是 <code>X轴</code> , <code>colum</code> 主轴是 <code>Y轴</code> ,</p>
<p><code>row-reverse</code> 和<code>colum-reverse</code> 分别代表主轴是X轴反方向、主轴是X轴反方向。</p>
<p>看看 <code>row-reverse</code> 的效果:</p>
<p><img src="/7/show1.png" alt="row-reverse"></p>
<blockquote>
<p>我们发现: 新版本的富裕空间和老版本的有所差异,老版本的富裕空间不会随着轴的方向改变而改变,新版本的富裕空间默认在轴的正方向</p>
</blockquote>
<h3 id="2-justify-content"><a href="#2-justify-content" class="headerlink" title="2.justify-content"></a>2.justify-content</h3><p><strong><em>控制新版本的主轴富裕空间,相当于老版本flex中的<code>-webkit-box-pack</code> ;</em></strong></p>
<p><code>flex-start</code> 富裕空间在主轴的正方向; <code>flex-end</code> 富裕空间在主轴的负方向; <code>center</code> 富裕空间在主轴的两边; <code>space-between</code> 富裕空间在所有项目之间; <code>space-around</code> 富裕空间平均分配在所有项目两边.再在 <code>#wrap</code> 上添加 <code>justify-content: space-between;</code> :</p>
<p><img src="/7/show2.png" alt="justify-content"></p>
<h3 id="3-align-items"><a href="#3-align-items" class="headerlink" title="3.align-items"></a>3.align-items</h3><p><strong><em>控制新版本的侧轴富裕空间,相当于老版本的<code>-webkit-box-align</code></em></strong></p>
<p><code>flex-start</code> 富裕空间在侧轴的正方向; <code>flex-end</code> 富裕空间在侧轴的负方向; <code>center</code> 富裕空间在侧轴的两边; <code>baseline</code> 按基线对齐; <code>stretch</code> 等高布局(在项目没有设置高度时).再在 <code>#wrap</code> 上添加 <code>align-items: center;</code> :</p>
<p><img src="/7/show3.png" alt="align-items"></p>
<h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><strong><em>将主轴上的富裕空间按比例分配到项目的width/height上,相当于老版本flex中的 <code>-webkit-box-flex</code></em></strong></p>
<p>在项目中添加 <code>flex-grow:1;</code>  这里主轴富裕空间一共有<code>300-50*4= 100 px</code> ;一共有4个项目则每个项目分 <code>1/4</code> 即 <code>100*(1/4)= 25 px</code> ,最终项目占的位置为 <code>50+25=75 px</code> ,看看效果:</p>
<p><img src="/7/show4.png" alt="flex-grow"></p>
<p>项目分配了 <code>主轴富裕空间</code> 所以占满了主轴.</p>
<p>也可以单独给一个项目设置更多的比例,在css中添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&gt; <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样第一个 <code>.box</code> 占了主轴富裕空间的 <code>7/10</code> (一共把富裕空间分成了10分,第一个项目占七份,其它的各占一份) ,最终第一个项目占的位置为 <code>50+100*(7/10)= 120 px</code> , 其它的项目占的位置为 <code>50+100*(1/10)=60 px</code> 看看效果:</p>
<p><img src="/7/show1.gif" alt="flex-grow"></p>
<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>容器新增的属性有 <code>flex-wrap</code> 、<code>align-content</code> 、<code>flex-flow</code></p>
<p>项目新增的属性有 <code>order</code> 、<code>align-self</code> 、<code>flex-shrink</code>、<code>flex-basis</code>、<code>flex</code></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Flex" target="_blank" rel="noopener">详情参考MDN文档</a></p>
<p>这里直接挑两举例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#wrap</span>&#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-flow: row wrap; </span><br><span class="line"><span class="css">    <span class="comment">/* flex-flow是flex-direction和flex-wrap的简写 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">align-content</span>: <span class="selector-tag">start</span>; <span class="comment">/* 除掉换行之间的间隙 */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: skyblue;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">order</span>: 2; <span class="comment">/*order值越大的排后面,初始值为1*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>看看效果:</p>
<p><img src="/7/show5.png" alt="flex"></p>
]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局总结(老版本)</title>
    <url>/6/</url>
    <content><![CDATA[<h2 id="什么是flex布局"><a href="#什么是flex布局" class="headerlink" title="什么是flex布局"></a>什么是flex布局</h2><blockquote>
<p>弹性盒子是 CSS3 的一种新的布局模式。</p>
<p>CSS3 弹性盒子 <code>Flexible Box</code> ，是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p>
</blockquote>
<p>flex有两个版本 <code>display: box</code> (老版本) 和 <code>display: flex</code> (新版本)</p>
<p>设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>
<p>接下来我们来看看老版本的flex布局是怎么样的.</p>
<h2 id="轴的概念"><a href="#轴的概念" class="headerlink" title="轴的概念"></a>轴的概念</h2><p>我们先来看一个简单的flex布局:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#wrap</span>&#123;</span></span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>; <span class="comment">/* 老版本flex */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: pink;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个结构中 <code>#wrap</code> 称为容器, <code>.box</code> 称为容器里的项目. </p>
<blockquote>
<p><strong><em>注意:老版本flex当项目总width超过容器时不会自动换行而是直接溢出!</em></strong></p>
</blockquote>
<p><img src="/6/zhou1.png" alt="轴"></p>
<p>如上图所示,flex布局中的有一个横向轴 <code>X轴</code> 和纵向轴 <code>Y轴</code> 箭头所指的方向为正方向, <code>X轴</code> 默认为主轴,所有的项目都是按主轴的正方向排列的,所以div虽然是块级标签依然可以同行显示.</p>
<p>项目在X轴上多出来的空间长度我们叫他 <code>X轴富裕空间</code>; 项目在Y轴上多出来的空间长度我们叫他 <code>Y轴富裕空间</code>;</p>
<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="1-webkit-box-orient"><a href="#1-webkit-box-orient" class="headerlink" title="1. -webkit-box-orient"></a>1. -webkit-box-orient</h3><p><strong><em>控制主轴是 <code>X轴</code> 还是 <code>Y轴</code></em></strong> . </p>
<p>属性值是 <code>horizontal</code> 主轴则为 <code>X轴</code> ; 属性值是 <code>vertical</code> 主轴则为Y轴</p>
<p>依然采用上面的布局方案,在 <code>#wrap</code> 上添加 <code>-webkit-box-orient: vertical;</code> ,我们发现项目沿Y轴排列,因为这时Y轴是主轴:</p>
<p><img src="/6/show1.png" alt="webkit-box-orient"></p>
<h3 id="2-webkit-box-direction"><a href="#2-webkit-box-direction" class="headerlink" title="2.  -webkit-box-direction"></a>2.  -webkit-box-direction</h3><p><strong><em>控制主轴的方向</em></strong></p>
<p><code>normal</code> 为默认方向; <code>reverse</code> 为反方向.我们再在 <code>#wrap</code> 上添加 <code>-webkit-box-direction: reverse;</code> ,发现项目从下往上排列,因为主轴Y的正方向已经改成向上了.</p>
<p><img src="/6/show2.png" alt="-webkit-box-direction"></p>
<h3 id="3-webkit-box-pack"><a href="#3-webkit-box-pack" class="headerlink" title="3. -webkit-box-pack"></a>3. -webkit-box-pack</h3><p><strong><em>分配 <code>主轴富裕空间</code> 的位置</em></strong> </p>
<p><code>start</code> 在所有项目整体的(主轴为X轴:右边;主轴为Y轴:下边); <code>end</code> 在所有项目整体的(主轴为X轴:左边;主轴为Y轴:上边) ;<code>center</code> 在所有项目整体的(主轴为X轴:左右;主轴为Y轴:/上下);  <code>justify</code> 在每个项目之间平均分配, 可以自己动手试试看有什么效果,我在这就测试一下继续在 <code>#wrap</code> 上添加 <code>-webkit-box-pack: justify;</code>:</p>
<p><img src="/6/show3.png" alt="-webkit-box-pack"></p>
<h3 id="4-webkit-box-align"><a href="#4-webkit-box-align" class="headerlink" title="4. -webkit-box-align"></a>4. -webkit-box-align</h3><p><strong><em>分配 <code>侧轴富裕空间</code> 的位置</em></strong></p>
<p><code>start</code> 在所有项目整体的(主轴为X轴:下边;主轴为Y轴:右边);  <code>end</code> 在所有项目整体的(主轴为X轴:上边;主轴为Y轴:左边); <code>center</code> 在所有项目整体的(主轴为X轴:上下两边;主轴为Y轴:左右两边); 在 <code>#wrap</code> 上添加 <code>-webkit-box-align: end;</code>:</p>
<p><img src="/6/show4.png" alt="-webkit-box-align"></p>
<h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="webkit-box-flex"><a href="#webkit-box-flex" class="headerlink" title="-webkit-box-flex"></a>-webkit-box-flex</h3><p><strong><em>将主轴上的富裕空间按比例分配到项目的width上</em></strong></p>
<p>重新布局:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#wrap</span>&#123;</span></span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    display: -webkit-box; </span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: blue;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    -webkit-box-flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在项目中添加 <code>-webkit-box-flex: 1;</code>  这里主轴富裕空间一共有<code>300-50*4= 100 px</code> ;一共有4个项目则每个项目分 <code>1/4</code> 即 <code>100*(1/4)= 25 px</code> ,最终项目占的位置为 <code>50+25=75 px</code> ,看看效果:</p>
<p><img src="/6/show5.png" alt="-webkit-box-flex"></p>
<p>项目分配了 <code>主轴富裕空间</code> 所以占满了主轴.</p>
<p>也可以单独给一个项目设置更多的比例,在css中添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&gt; <span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-box-flex</span>: <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样第一个 <code>.box</code> 占了主轴富裕空间的 <code>7/10</code> (一共把富裕空间分成了10分,第一个项目占七份,其它的各占一份) ,最终第一个项目占的位置为 <code>50+100*(7/10)= 120 px</code> ,看看效果:</p>
<p><img src="/6/show6.png" alt="flex"></p>
]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>实现垂直水平居中的6种方法</title>
    <url>/5/</url>
    <content><![CDATA[<h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><p>html结构:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>垂直水平居中的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center; <span class="comment">/* 水平居中 */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>; <span class="comment">/* 垂直居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果:</p>
<p><img src="/5/text1.png" alt="垂直水平居中"></p>
<h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><p>html结构:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>垂直水平居中的文字垂直水平居中的文字垂直水平居中的文字垂直水平居中的文字垂直水平居中的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    <span class="attribute">display</span>: table; <span class="comment">/* 使块状元素成为一个块级表格 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell; <span class="comment">/* 子元素设置成表格单元格 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;	<span class="comment">/* 水平居中 */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;	<span class="comment">/* 使表格内容居中显示，即可实现垂直居中的效果 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果:</p>
<p><img src="/5/text2.png" alt="垂直水平居中"></p>
<h3 id="利用负的margin值"><a href="#利用负的margin值" class="headerlink" title="利用负的margin值"></a>利用负的margin值</h3><p>html结构:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">50px</span>; <span class="comment">/* 向上移动自身的一半 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>; <span class="comment">/* 向左移动自身的一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果:</p>
<p><img src="/5/center1.png" alt="垂直水平居中"></p>
<h3 id="绝对定位-margin-auto"><a href="#绝对定位-margin-auto" class="headerlink" title="绝对定位+margin: auto"></a>绝对定位+margin: auto</h3><p>html结构:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果:</p>
<p><img src="/5/center2.png" alt="垂直水平居中"></p>
<h3 id="利用CSS3的-transform-translate"><a href="#利用CSS3的-transform-translate" class="headerlink" title="利用CSS3的 transform: translate"></a>利用CSS3的 transform: translate</h3><p>html结构:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是用来撑开box的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是用来撑开box的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是用来撑开box的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: greenyellow;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果:</p>
<p><img src="/5/center3.png" alt="垂直水平居中"></p>
<h3 id="用display-flex"><a href="#用display-flex" class="headerlink" title="用display: flex"></a>用display: flex</h3><p>html结构:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是用来撑开box的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是用来撑开box的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是用来撑开box的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    <span class="attribute">display</span>: flex; <span class="comment">/* 定义为弹性容器 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center; <span class="comment">/* 在纵轴上垂直居中对齐 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center; <span class="comment">/* 在主轴上垂直居中对齐 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: lightyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果:</p>
<p><img src="/5/center4.png" alt="垂直水平居中"></p>
]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>了解CSS中的hack</title>
    <url>/4/</url>
    <content><![CDATA[<h2 id="什么是-CSS-Hack"><a href="#什么是-CSS-Hack" class="headerlink" title="什么是 CSS Hack?"></a>什么是 CSS Hack?</h2><blockquote>
<p>CSS hack由于不同浏览器不同版本,对CSS的解析认识不完全一样，因此会导致生成的页面效果不一样，这个时候我们就需要针对不同的浏览器去写不同的CSS，来同时兼容不同的浏览器</p>
</blockquote>
<p>简单的说，CSS hack的目的就是使你的CSS代码兼容不同的浏览器。当然，我们也可以反过来利用CSS hack为不同版本的浏览器定制编写不同的CSS效果.</p>
<h2 id="怎么使用-CSS-Hack"><a href="#怎么使用-CSS-Hack" class="headerlink" title="怎么使用 CSS Hack?"></a>怎么使用 CSS Hack?</h2><ol>
<li><p>条件注释法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">这段文字只在IE浏览器显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">这段文字只在IE6浏览器显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 6]&gt;			</span></span><br><span class="line"><span class="comment">这段文字只在IE6及以上显示	(gte : 大于或等于/gt : 大于/lt : 小于)</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if ! IE 8]&gt;</span></span><br><span class="line"><span class="comment">这段文字在非IE8浏览器显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--[if !IE]&gt;</span></span><br><span class="line"><span class="comment">这段文字只在非IE浏览器显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性hack</p>
<p>代码如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#test</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">color</span>: blue\<span class="number">0</span>; <span class="comment">/* IE8及以上 */</span></span><br><span class="line">    <span class="attribute">color</span>: yellow\<span class="number">9</span>; <span class="comment">/* IE10及以下 */</span></span><br><span class="line">    *color: green; /* IE7及以下 */</span><br><span class="line">    _<span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>; <span class="comment">/* IE6 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择符级Hack</p>
<p>简单举例几个:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#090</span>;&#125; <span class="comment">/* IE6 */</span></span><br><span class="line">* + <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#ff0</span>;&#125; <span class="comment">/* IE7 */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:lang(zh-cn)</span>&#123;<span class="attribute">color</span>:<span class="number">#f00</span>;&#125; <span class="comment">/* IE8+ and not IE */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:nth-child(1)</span>&#123;<span class="attribute">color</span>:<span class="number">#0ff</span>;&#125; <span class="comment">/* IE9+ and not IE */</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意:不管使用哪种方法,书写的顺序都应该是先写支持版本高的,再写支持版本低的,因为后面的代码会覆盖上面的代码!!!</p>
]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Hack</tag>
      </tags>
  </entry>
  <entry>
    <title>用Hexo搭建个人博客中遇见的一些问题总结</title>
    <url>/2/</url>
    <content><![CDATA[<h2 id="1-不蒜子统计无法显示或显示异常"><a href="#1-不蒜子统计无法显示或显示异常" class="headerlink" title="1.不蒜子统计无法显示或显示异常"></a>1.不蒜子统计无法显示或显示异常</h2><p>不蒜子统计不显示数量,而且位置也不对,原因是不蒜子统计的域名过期了，而js的引用就会有问题,解决方案:</p>
<p>找到主题文件下的 <code>layout/_third-party/analytics/busuanzi-counter.swig</code>  文件,把script标签的src改成 <code>https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</code> </p>
<h2 id="2-部署到Github后图片不显示"><a href="#2-部署到Github后图片不显示" class="headerlink" title="2.部署到Github后图片不显示"></a>2.部署到Github后图片不显示</h2><p>因为在写文章的时候添加的都是本地图片,上传到远端后无法正确的取到图片的路径,解决方法如下:</p>
<ul>
<li><p>在根目录下的 <code>_config.yml</code> 文件中搜索 <code>post_asset_folder</code> 字节,改成</p>
<p> <code>post_asset_folder: true</code>  ,</p>
<p>(hexo在3以上版本才行)</p>
</li>
<li><p>在根目录下执行</p>
</li>
</ul>
<p>   <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<ul>
<li><p>完成安装后用 <code>hexo</code> 新建文章时，会自动建立一个与文章同名的文件夹，然后可以把与该文章相关的所有图片都放到那个文件夹结构如下:</p>
</li>
<li><p><img src="/2/mulu.jpg" alt="新建文章"></p>
<p>然后在写1.md这个文章时就可以把相关的图片放在1文件夹里,引入图片用</p>
<p> <code>![](1/image.jpg)</code> 的形式引入(不需要把全部的绝对路径都复制下来)</p>
<p>需要注意的是:</p>
<p>*复制而来的路径是 <code>\</code> 而我们需要用 <code>/</code>否则会出错.</p>
<p>*每个博文和它同名的文件夹成映射关系的,如果你在 <code>2.md</code> 访问 <code>1文件夹</code> 图片不会显示!</p>
</li>
<li><p>写完文章我们同步到GitHub上之后图片就能显示了!</p>
</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客怎么新建文章并发布</title>
    <url>/3/</url>
    <content><![CDATA[<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>根目录命令行输入<code>hexo new post demo</code>新建文章, demo 是你要新建的文件名.</p>
<p>然后在根目录下的source/_posts/里就会新建出一个demo.md文件.打开后会有自动生成的一些信息可以自己修改,然后在后面写文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">data: 2019-07-31 21:02:36</span><br><span class="line">tags:</span><br><span class="line">    - 标签1</span><br><span class="line">    - 标签2</span><br><span class="line">categories: 分类</span><br><span class="line">keywords: [关键词,关键词]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>博客都是用markdown 语法来写的,比较简单。写两篇文章就能上手,不清楚的可以参考 <a href="http://www.markdown.cn/#inline-html" target="_blank" rel="noopener">http://www.markdown.cn/#inline-html</a> </p>
<p>或者自己百度,在这我推荐一款写mardown的免费编辑器 Typora ,这款编辑器可以在写文章的时候实时预览,帮助你专注于内容本身,界面也比较简约,</p>
<p>下载地址: <a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>写好文章之后在博客的根目录下运行 git bash 发布到本地服务器:</p>
<p><code>$hexo clean</code></p>
<p><code>$hexo g</code>        生成网站静态文件到默认设置的 public 文件夹</p>
<p><code>$hexo s</code>        查看效果</p>
<p><code>$hexo d</code>        自动生成网站静态文件，并部署到设定的github仓库。</p>
<p>如果 <code>$hexo d</code> 没反应说明缺少插件,根目录执行:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>完了之后再 <code>$hexo d</code> 就 ok了</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+github搭建NexT主题个人博客</title>
    <url>/1/</url>
    <content><![CDATA[<h2 id="前提摘要"><a href="#前提摘要" class="headerlink" title="前提摘要"></a>前提摘要</h2><p>安装Hexo之前需安装好nodejs和Git,并创建好自己的Github账号</p>
<p>Hexo官网: <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p>
<p>NexT官网: <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><code>win+R</code> 运行命令行 <code>npm install hexo-cli -g</code>  安装Hexo.</p>
<p>输入 <code>hexo -v</code> 验证是否安装成功.</p>
<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>输入 <code>hexo init blog</code> 会在当前目录底下新建一个blog文件夹并且会在里面新建博客的文件。</p>
<p><code>cd blog</code> 进入blog目录</p>
<p><code>hexo s</code> 启动Hexo就可以通过浏览器访问    <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>    打开博客了</p>
<p>blog根目录下有一个 <code>_config.yml</code> 文件    (后面称为 <code>站点配置文件</code> )</p>
<h2 id="配置站点文件"><a href="#配置站点文件" class="headerlink" title="配置站点文件"></a>配置站点文件</h2><p>用vscode打开 <code>站点配置文件</code> (用别的编辑器都行), <code>Ctrl</code> + <code>F</code> 查找 Site 字段,然后进行相关的配置,大概意思自己翻译,下面是我的配置:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Code7s blog</span><br><span class="line">subtitle: 前端</span><br><span class="line">description:  天行健，君子以自强不息<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span>地势坤，君子以厚德载物</span><br><span class="line">keywords: 个人博客 web前端 技术分享</span><br><span class="line">author: 余其胜</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure>

<p>language设置成简体中文  zh-Hans</p>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>heox上有很多主题可以根据个人喜好下载,我这用的是NexT主题,直接在blog目录下克隆到本地:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>之后在themes文件夹中就有了个next文件夹,这里面也有个_config.yml文件,</p>
<p>之后叫这个文件为 <code>主题配置文件</code> .(注意区分 <code>站点配置文件</code> 和 <code>主题配置文件</code> )</p>
<p>打开 <code>站点配置文件</code> 找到 theme 改成    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>然后命令行输入:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>在4000端口查看,已经配置好了next主题,</p>
<p>具体的一些主题配置都可以在 <a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">NexT官网</a> 查看相应的文档进行更改,这里不详细谈了,后续会发一些相关的博文。</p>
<blockquote>
<p>更改主题后需要把根目录下的 <code>.git</code> 和next文件夹下的 <code>.git</code> <code>.github</code>文件夹删除</p>
</blockquote>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="创建github仓库进行相关配置"><a href="#创建github仓库进行相关配置" class="headerlink" title="创建github仓库进行相关配置"></a>创建github仓库进行相关配置</h3><p>Github官网 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>  注册账号并登陆</p>
<p>登录成功后,点击右上角头像左边的+号    new repository    创建一个仓库,</p>
<p>仓库名为 uesrname.github.io</p>
<p><img src="/1/new_rep.jpg" alt="创建github仓库"></p>
<p>打开GitHub上新创建的仓库点击Clone or download ,复制底下的链接</p>
<p><img src="/1/clone.jpg" alt="Clone or download"></p>
<p>打开 <code>站点配置文件</code> 查找 deploy,把复制好的链接repo里,配置改成下面这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Code7s/Code7s.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="配置git和设置秘钥"><a href="#配置git和设置秘钥" class="headerlink" title="配置git和设置秘钥"></a>配置git和设置秘钥</h3><p>设置用户名和email</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$git config --global user.name	&apos;yourusername&apos;</span><br><span class="line">$git config --global user.email &apos;youremail&apos;</span><br></pre></td></tr></table></figure>

<p>再安装git部署的插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>因为本地要和远程仓库链接,我们就要生成一个秘钥:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C &apos;youremail@xxx.com&apos;</span><br></pre></td></tr></table></figure>

<p>回车之后显示:</p>
<p><img src="/1/ssh.jpg" alt="设置秘钥"></p>
<p>红框显示的就是秘钥存放的地址,在我的电脑打开这个地址,找到<code>id_rsa.pub</code>文件,用记事本打开把里面的内容复制.</p>
<p>然后打开github→右上角头像→setting→SSH and GPGkeys</p>
<p>然后创建一个ssh keys,把之前的秘钥粘贴上去保存.</p>
<p>查看是否连接成功:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>提示 Hi username!…… 就表示成功了!</p>
<h3 id="提交代码到github"><a href="#提交代码到github" class="headerlink" title="提交代码到github"></a>提交代码到github</h3><p><code>$hexo g</code> 生成网站静态文件</p>
<p><code>$hexo d</code> 部署到github上,这里可能会提示你输入github的账号密码.输入完回车就OK了.</p>
<p>然后我们就可以在浏览器输入仓库名 <code>user.github.io</code> 打开我们的博客了</p>
<p><img src="/1/githubio.jpg" alt="提交代码到github"></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
